//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
namespace Models.XsdConvert.genericRailML
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// <para>technical data about the propulsion system of a vehicle</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ePropulsion", Namespace="https://www.railml.org/schemas/2018")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class EPropulsion : genericRailML.TPropulsion
    {
        
        /// <summary>
        /// <para>technical data of main transformer</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("transformer", Order=0)]
        public ETransformer Transformer { get; set; }
        
        /// <summary>
        /// <para>technical data of inverter between OHL/transformer and link circuit</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("fourQuadrantChopper", Order=1)]
        public EFourQuadrantChopper FourQuadrantChopper { get; set; }
        
        /// <summary>
        /// <para>nominal values of link circuit between input inverter and motor inverter</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("link", Order=2)]
        public genericRailML.TLink Link { get; set; }
        
        /// <summary>
        /// <para>technical data of inverter between link circuit and motors</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("tractionInverter", Order=3)]
        public ETractionInverter TractionInverter { get; set; }
        
        /// <summary>
        /// <para>technical data of traction motor</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("tractionMotor", Order=4)]
        public ETractionMotor TractionMotor { get; set; }
        
        /// <summary>
        /// <para>technical data of diesel engine</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("diesel", Order=5)]
        public genericRailML.TDieselEngine Diesel { get; set; }
        
        /// <summary>
        /// <para>technical data of transmission system between motor and wheel</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("gear", Order=6)]
        public EGear Gear { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EAuxiliarySupply> _auxiliarySupply;
        
        /// <summary>
        /// <para>technical data of auxiliary systems (supply and consumption)</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("auxiliarySupply", Order=7)]
        public System.Collections.ObjectModel.Collection<EAuxiliarySupply> AuxiliarySupply
        {
            get
            {
                return this._auxiliarySupply;
            }
            private set
            {
                this._auxiliarySupply = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AuxiliarySupply-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AuxiliarySupply collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool AuxiliarySupplySpecified
        {
            get
            {
                return (this.AuxiliarySupply.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="EPropulsion" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="EPropulsion" /> class.</para>
        /// </summary>
        public EPropulsion()
        {
            this._auxiliarySupply = new System.Collections.ObjectModel.Collection<EAuxiliarySupply>();
        }
        
        /// <summary>
        /// <para>mechanical tractive effort at wheel vs. speed by propulsion system</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("tractiveEffort", Order=8)]
        public genericRailML.TEffortCurve TractiveEffort { get; set; }
        
        /// <summary>
        /// <para>mechanical brake effort at wheel vs. speed by propulsion system</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("brakeEffort", Order=9)]
        public genericRailML.TEffortCurve BrakeEffort { get; set; }
        
        /// <summary>
        /// <para>net current of the entire propulsion system as curve vs. speed for traction mode</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("tractiveCurrent", Order=10)]
        public genericRailML.TCurrentCurve TractiveCurrent { get; set; }
        
        /// <summary>
        /// <para>net current of the entire propulsion system as curve vs. speed for braking mode</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("brakeCurrent", Order=11)]
        public genericRailML.TCurrentCurve BrakeCurrent { get; set; }
        
        /// <summary>
        /// <para>limitation curve of net current of the entire propulsion system vs. net voltage for traction mode</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("tractiveCurrentLimitation", Order=12)]
        public genericRailML.TCurrentLimitation TractiveCurrentLimitation { get; set; }
        
        /// <summary>
        /// <para>limitation curve of net current of the entire propulsion system vs. net voltage for braking mode</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("brakeCurrentLimitation", Order=13)]
        public genericRailML.TCurrentLimitation BrakeCurrentLimitation { get; set; }
        
        /// <summary>
        /// <para>efficiency of the entire propulsion system as curve vs. speed or effort for traction mode</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("tractiveVehicleEfficiency", Order=14)]
        public genericRailML.TEfficiencyCurve TractiveVehicleEfficiency { get; set; }
        
        /// <summary>
        /// <para>efficiency of the entire propulsion system as curve vs. speed or effort for braking mode</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("brakeVehicleEfficiency", Order=15)]
        public genericRailML.TEfficiencyCurve BrakeVehicleEfficiency { get; set; }
        
        /// <summary>
        /// <para>data about rack traction equipment of the vehicle used for propulsion</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("rackTraction", Order=16)]
        public genericRailML.TRackTractionType RackTraction { get; set; }
    }
}
