//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Xml.Serialization;

namespace Models.XsdConvert.genericRailML
{
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("tController", Namespace="https://www.railml.org/schemas/2018")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    internal partial class TController : genericRailML.TElementWithIDAndName, IAController
    {
        
        /// <summary>
        /// <para>Container to define disabled/enabled controllers</para>
        /// </summary>
        [XmlElementAttribute("states", Order=0)]
        public TStates States { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<genericRailML.TElementRefInGroup> _ocpRef;
        
        /// <summary>
        /// <para>reference from a controller to an OCP</para>
        /// </summary>
        [XmlElementAttribute("ocpRef", Order=1)]
        public Collection<genericRailML.TElementRefInGroup> OcpRef
        {
            get
            {
                return this._ocpRef;
            }
            private set
            {
                this._ocpRef = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OcpRef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OcpRef collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        public bool OcpRefSpecified
        {
            get
            {
                return (this.OcpRef.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="TController" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TController" /> class.</para>
        /// </summary>
        public TController()
        {
            this._ocpRef = new Collection<genericRailML.TElementRefInGroup>();
        }
        
        /// <summary>
        /// <para>reference to parent controller</para>
        /// <para>an XML-side constrained reference to one xs:ID value, acts across an XML file including its outsourced components (xi:include mechanism)</para>
        /// </summary>
        [XmlAttributeAttribute("parentControllerRef")]
        public string ParentControllerRef { get; set; }
        
        /// <summary>
        /// <para>(product) name of the controller</para>
        /// </summary>
        [XmlAttributeAttribute("model")]
        public string Model { get; set; }
        
        /// <summary>
        /// <para>type of controller regarding its complexity and responsibility</para>
        /// </summary>
        [XmlAttributeAttribute("type")]
        public string Type { get; set; }
        
        /// <summary>
        /// <para>technology that the controller is based on</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("technologyType")]
        public TControllerTechnologyType TechnologyTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TechnologyType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TechnologyType property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TechnologyTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>technology that the controller is based on</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<TControllerTechnologyType> TechnologyType
        {
            get
            {
                if (this.TechnologyTypeValueSpecified)
                {
                    return this.TechnologyTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TechnologyTypeValue = value.GetValueOrDefault();
                this.TechnologyTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>controller software version</para>
        /// </summary>
        [XmlAttributeAttribute("swVersion")]
        public string SwVersion { get; set; }
    }
}
