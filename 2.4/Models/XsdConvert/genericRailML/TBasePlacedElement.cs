//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Xml.Serialization;

namespace Models.XsdConvert.genericRailML
{
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("tBasePlacedElement", Namespace="https://www.railml.org/schemas/2018")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlIncludeAttribute(typeof(genericRailML.EBridge))]
    [XmlIncludeAttribute(typeof(genericRailML.ECrossing))]
    [XmlIncludeAttribute(typeof(genericRailML.ELevelCrossing))]
    [XmlIncludeAttribute(typeof(genericRailML.ESwitch))]
    [XmlIncludeAttribute(typeof(genericRailML.ETunnel))]
    [XmlIncludeAttribute(typeof(TAxleWeightChange))]
    [XmlIncludeAttribute(typeof(TBalise))]
    [XmlIncludeAttribute(typeof(TBaseServiceSection))]
    [XmlIncludeAttribute(typeof(TBorder))]
    [XmlIncludeAttribute(typeof(TBridge))]
    [XmlIncludeAttribute(typeof(TClearanceGaugeChange))]
    [XmlIncludeAttribute(typeof(TCommonSwitchAndCrossingData))]
    [XmlIncludeAttribute(typeof(TCrossing))]
    [XmlIncludeAttribute(typeof(TCrossSection))]
    [XmlIncludeAttribute(typeof(TDelimitedOrientedElement))]
    [XmlIncludeAttribute(typeof(TDelimitedOrientedElementWithLength))]
    [XmlIncludeAttribute(typeof(TDerailer))]
    [XmlIncludeAttribute(typeof(TElectrificationChange))]
    [XmlIncludeAttribute(typeof(TGaugeChange))]
    [XmlIncludeAttribute(typeof(TGradientChange))]
    [XmlIncludeAttribute(typeof(TLevelCrossing))]
    [XmlIncludeAttribute(typeof(TLock))]
    [XmlIncludeAttribute(typeof(TOperationModeChange))]
    [XmlIncludeAttribute(typeof(TOrientedElement))]
    [XmlIncludeAttribute(typeof(TOrientedElementWithLength))]
    [XmlIncludeAttribute(typeof(TOwnerChange))]
    [XmlIncludeAttribute(typeof(TPlacedElement))]
    [XmlIncludeAttribute(typeof(TPlacedElementWithLength))]
    [XmlIncludeAttribute(typeof(TPlatformEdge))]
    [XmlIncludeAttribute(typeof(TPowerTransmissionChange))]
    [XmlIncludeAttribute(typeof(TRadiusChange))]
    [XmlIncludeAttribute(typeof(TRuleCodeElement))]
    [XmlIncludeAttribute(typeof(TServiceSection))]
    [XmlIncludeAttribute(typeof(TSignal))]
    [XmlIncludeAttribute(typeof(TSpeedChange))]
    [XmlIncludeAttribute(typeof(TStopPost))]
    [XmlIncludeAttribute(typeof(TStrictOrientedElement))]
    [XmlIncludeAttribute(typeof(TStrictOrientedElementWithLength))]
    [XmlIncludeAttribute(typeof(TSwitch))]
    [XmlIncludeAttribute(typeof(TTrackCircuitBorder))]
    [XmlIncludeAttribute(typeof(TTrackCondition))]
    [XmlIncludeAttribute(typeof(TTrainDetector))]
    [XmlIncludeAttribute(typeof(TTrainProtectionChange))]
    [XmlIncludeAttribute(typeof(TTrainProtectionElement))]
    [XmlIncludeAttribute(typeof(TTrainRadioChange))]
    [XmlIncludeAttribute(typeof(TTunnel))]
    internal partial class TBasePlacedElement : genericRailML.TElementWithIDAndName, IARelPosition, IAAbsPosition
    {
        
        [XmlElementAttribute("geoCoord", Order=0)]
        public TGeoCoord GeoCoord { get; set; }
        
        /// <summary>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [XmlAttributeAttribute("pos")]
        public decimal Pos { get; set; }
        
        /// <summary>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("absPos")]
        public decimal AbsPosValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AbsPos-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AbsPos property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AbsPosValueSpecified { get; set; }
        
        /// <summary>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> AbsPos
        {
            get
            {
                if (this.AbsPosValueSpecified)
                {
                    return this.AbsPosValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AbsPosValue = value.GetValueOrDefault();
                this.AbsPosValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>DEPRECATED, not needed, not used</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("absPosOffset")]
        public decimal AbsPosOffsetValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AbsPosOffset-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AbsPosOffset property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AbsPosOffsetValueSpecified { get; set; }
        
        /// <summary>
        /// <para>DEPRECATED, not needed, not used</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> AbsPosOffset
        {
            get
            {
                if (this.AbsPosOffsetValueSpecified)
                {
                    return this.AbsPosOffsetValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AbsPosOffsetValue = value.GetValueOrDefault();
                this.AbsPosOffsetValueSpecified = value.HasValue;
            }
        }
    }
}
