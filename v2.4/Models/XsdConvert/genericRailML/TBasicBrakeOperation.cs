//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Xml.Serialization;

namespace Models.XsdConvert.genericRailML
{
    /// <summary>
    /// <para>data type for description of brake operation</para>
    /// </summary>
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("tBasicBrakeOperation", Namespace="https://www.railml.org/schemas/2018")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    internal partial class TBasicBrakeOperation : IABasicBrakeOperation
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entit√§t eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [KeyAttribute()]
        public long Id { get; set; }
        
        [XmlElementAttribute("decelerationTable", Order=0)]
        public TDecelerationCurve DecelerationTable { get; set; }
        
        /// <summary>
        /// <para>possible values for selection of different brake operation rules</para>
        /// <para>list of possible brake supervision regimes causing different operational behaviour during braking</para>
        /// </summary>
        [XmlAttributeAttribute("brakeSupervision")]
        public string BrakeSupervision { get; set; }
        
        /// <summary>
        /// <para>average brake application time, typically in seconds</para>
        /// </summary>
        [XmlAttributeAttribute("decelerationDelay")]
        public string DecelerationDelay { get; set; }
        
        /// <summary>
        /// <para>below this speed limit in km/h generally the supervision regime of "none" shall apply</para>
        /// <para>generic type for speed/velocity values measured in kilometer per hour</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("releaseSpeed")]
        public decimal ReleaseSpeedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ReleaseSpeed-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReleaseSpeed property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReleaseSpeedValueSpecified { get; set; }
        
        /// <summary>
        /// <para>below this speed limit in km/h generally the supervision regime of "none" shall apply</para>
        /// <para>generic type for speed/velocity values measured in kilometer per hour</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> ReleaseSpeed
        {
            get
            {
                if (this.ReleaseSpeedValueSpecified)
                {
                    return this.ReleaseSpeedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReleaseSpeedValue = value.GetValueOrDefault();
                this.ReleaseSpeedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>average deceleration value in this supervision regime in m/s^2</para>
        /// <para>generic type for acceleration values measured in meter per square second</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("meanDeceleration")]
        public decimal MeanDecelerationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MeanDeceleration-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MeanDeceleration property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MeanDecelerationValueSpecified { get; set; }
        
        /// <summary>
        /// <para>average deceleration value in this supervision regime in m/s^2</para>
        /// <para>generic type for acceleration values measured in meter per square second</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> MeanDeceleration
        {
            get
            {
                if (this.MeanDecelerationValueSpecified)
                {
                    return this.MeanDecelerationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MeanDecelerationValue = value.GetValueOrDefault();
                this.MeanDecelerationValueSpecified = value.HasValue;
            }
        }
    }
}
