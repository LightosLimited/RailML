//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
namespace Models.DB
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Xml.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("eBrakeUsage", Namespace="https://www.railml.org/schemas/2018")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    internal partial class EBrakeUsage : TBasicBrakeType, IABrakeUsage
    {
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<System.Xml.Linq.XElement> _any;
        
        /// <summary>
        /// <para>provide an extension point for non-railML elements in foreign namespace</para>
        /// </summary>
        [System.Xml.Serialization.XmlAnyElementAttribute(Order=0)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public System.Collections.ObjectModel.Collection<System.Xml.Linq.XElement> Any
        {
            get
            {
                return this._any;
            }
            private set
            {
                this._any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Any-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool AnySpecified
        {
            get
            {
                return (this.Any.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="EBrakeUsage" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="EBrakeUsage" /> class.</para>
        /// </summary>
        public EBrakeUsage()
        {
            this._any = new System.Collections.ObjectModel.Collection<System.Xml.Linq.XElement>();
        }
        
        /// <summary>
        /// <para>DEPRECATED: so far used uncertain value, specific values should now be used instead"</para>
        /// <para>Brake percentage as value of braking performance in relation to vehicle weight</para>
        /// <para xml:lang="en">Maximum inclusive value: 225.</para>
        /// <para xml:lang="en">Minimum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "6", "225")]
        [System.Xml.Serialization.XmlAttributeAttribute("brakePercentage")]
        public string BrakePercentage { get; set; }
        
        /// <summary>
        /// <para>to be used instead of the uncertain "brakePercentage" as specific value for the regular case"</para>
        /// <para>Brake percentage as value of braking performance in relation to vehicle weight</para>
        /// <para xml:lang="en">Maximum inclusive value: 225.</para>
        /// <para xml:lang="en">Minimum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "6", "225")]
        [System.Xml.Serialization.XmlAttributeAttribute("regularBrakePercentage")]
        public string RegularBrakePercentage { get; set; }
        
        /// <summary>
        /// <para>to be used instead of the uncertain "brakePercentage" as specific value for the emergency case"</para>
        /// <para>Brake percentage as value of braking performance in relation to vehicle weight</para>
        /// <para xml:lang="en">Maximum inclusive value: 225.</para>
        /// <para xml:lang="en">Minimum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "6", "225")]
        [System.Xml.Serialization.XmlAttributeAttribute("emergencyBrakePercentage")]
        public string EmergencyBrakePercentage { get; set; }
    }
}
