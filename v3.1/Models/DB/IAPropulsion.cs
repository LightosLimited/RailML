//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
namespace Models.DB
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Xml.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    internal partial interface IAPropulsion
    {
        
        /// <summary>
        /// <para>installed power of propulsion system per vehicle in Watt</para>
        /// <para>generic type for power values measured in watt</para>
        /// </summary>
        decimal Power
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>type of power for propulsion system in the vehicle</para>
        /// </summary>
        string PowerType
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>type of transmission system in vehicle (mainly for diesel cars)</para>
        /// </summary>
        string Transmission
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>type of control for propulsion system in the vehicle</para>
        /// </summary>
        string ControlType
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>maximum tractive effort per vehicle in Newton (to be used in conjunction with 'tractiveEffort' element)</para>
        /// <para>generic type for force values measured in newton</para>
        /// </summary>
        System.Nullable<decimal> MaxTractEffort
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>factor for increased running resistance by rotating masses of propulsion system</para>
        /// </summary>
        System.Nullable<decimal> RotationMassFactor
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>figure for increased running resistance by rotating masses of propulsion system</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        System.Nullable<decimal> AdditionalRotationMass
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>DEPRECATED: flag, whether the vehicle comprises equipment for use on rack railways</para>
        /// </summary>
        System.Nullable<bool> RackTraction
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>flag, whether the vehicle can be remotely controlled</para>
        /// </summary>
        System.Nullable<bool> RemoteControl
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>number of notches of propulsion system switch gear</para>
        /// <para>generic type for counters (e.g. number of equipment), allowing zero</para>
        /// </summary>
        string NumberNotches
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>nominal diameter of driven wheels in m</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        System.Nullable<decimal> WheelDiameter
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>maximum braking effort of propulsion system per vehicle in N (to be used in conjunction with 'brakeEffort' element)</para>
        /// <para>generic type for force values measured in newton</para>
        /// </summary>
        System.Nullable<decimal> MaxBrakeEffort
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>maximum braking power in W for regenerative braking</para>
        /// <para>generic type for power values measured in watt</para>
        /// </summary>
        System.Nullable<decimal> MaxBrakePower
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>the average efficiency of the entire propulsion system in traction mode</para>
        /// <para>generic type for values only between 0 and 1, as efficiency or cosine phi.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 6.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "1")]
        System.Nullable<decimal> TotalTractEfficiency
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>the average efficiency of the entire propulsion system in braking mode</para>
        /// <para>generic type for values only between 0 and 1, as efficiency or cosine phi.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 6.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "1")]
        System.Nullable<decimal> TotalBrakeEfficiency
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>under voltage threshold to switch off traction power in case net voltage out of limit</para>
        /// <para>generic type for voltage values measured in volt</para>
        /// </summary>
        System.Nullable<decimal> TractionOffUndervoltageThreshold
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>current limitation in Amps at zero speed</para>
        /// <para>generic type for electric current values measured in ampere</para>
        /// </summary>
        System.Nullable<decimal> ZeroSpeedCurrentLimitation
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>maximum voltage in Volts for regenerative braking</para>
        /// <para>generic type for voltage values measured in volt</para>
        /// </summary>
        System.Nullable<decimal> MaxRegenerativeVoltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>additional information, whether this propulsion dataset is for the normal, slow or fast speed range of the engine</para>
        /// </summary>
        System.Nullable<TSpeedRangeType> SpeedRange
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>permissible speed with front ahead (normal direction)</para>
        /// <para>generic type for speed/velocity values measured in kilometer per hour</para>
        /// </summary>
        System.Nullable<decimal> ForwardSpeed
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>permissible speed with tail ahead (reverse direction)</para>
        /// <para>generic type for speed/velocity values measured in kilometer per hour</para>
        /// </summary>
        System.Nullable<decimal> ReverseSpeed
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>propulsion system can be activated only in standstill</para>
        /// </summary>
        System.Nullable<bool> ActivationStandstill
        {
            get;
            set;
        }
    }
}
