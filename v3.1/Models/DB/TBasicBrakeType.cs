//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
namespace Models.DB
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// <para>settings and characteristic of a particular brake type or brake application position</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tBasicBrakeType", Namespace="https://www.railml.org/schemas/2018")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EBrakeUsage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EVehicleBrake))]
    internal partial class TBasicBrakeType : IABasicBrakeAttributes
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entit√§t eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public long Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TBasicBrakeTypeAuxiliaryBrakes> _auxiliaryBrakes;
        
        /// <summary>
        /// <para>provides access to the list of possible auxiliary brake systems</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("auxiliaryBrakes", Order=0)]
        public System.Collections.ObjectModel.Collection<TBasicBrakeTypeAuxiliaryBrakes> AuxiliaryBrakes
        {
            get
            {
                return this._auxiliaryBrakes;
            }
            private set
            {
                this._auxiliaryBrakes = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AuxiliaryBrakes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AuxiliaryBrakes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool AuxiliaryBrakesSpecified
        {
            get
            {
                return (this.AuxiliaryBrakes.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="TBasicBrakeType" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TBasicBrakeType" /> class.</para>
        /// </summary>
        public TBasicBrakeType()
        {
            this._auxiliaryBrakes = new System.Collections.ObjectModel.Collection<TBasicBrakeTypeAuxiliaryBrakes>();
        }
        
        /// <summary>
        /// <para>vacuum or compressed air brake, hand brake, parking brake, cable brake</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("brakeType")]
        public string BrakeType { get; set; }
        
        /// <summary>
        /// <para>base brake switch, one of G, P or R</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("airBrakeApplicationPosition")]
        public TAirBrakeApplicationPosition AirBrakeApplicationPositionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AirBrakeApplicationPosition-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AirBrakeApplicationPosition property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AirBrakeApplicationPositionValueSpecified { get; set; }
        
        /// <summary>
        /// <para>base brake switch, one of G, P or R</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<TAirBrakeApplicationPosition> AirBrakeApplicationPosition
        {
            get
            {
                if (this.AirBrakeApplicationPositionValueSpecified)
                {
                    return this.AirBrakeApplicationPositionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AirBrakeApplicationPositionValue = value.GetValueOrDefault();
                this.AirBrakeApplicationPositionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>brake mass for normal brake operations of none-automatic brakes</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("regularBrakeMass")]
        public decimal RegularBrakeMassValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RegularBrakeMass-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RegularBrakeMass property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool RegularBrakeMassValueSpecified { get; set; }
        
        /// <summary>
        /// <para>brake mass for normal brake operations of none-automatic brakes</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> RegularBrakeMass
        {
            get
            {
                if (this.RegularBrakeMassValueSpecified)
                {
                    return this.RegularBrakeMassValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RegularBrakeMassValue = value.GetValueOrDefault();
                this.RegularBrakeMassValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>brake mass for emergency brake operations, differs from regular brake mass depending on auxiliary brakes</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("emergencyBrakeMass")]
        public decimal EmergencyBrakeMassValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EmergencyBrakeMass-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EmergencyBrakeMass property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool EmergencyBrakeMassValueSpecified { get; set; }
        
        /// <summary>
        /// <para>brake mass for emergency brake operations, differs from regular brake mass depending on auxiliary brakes</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> EmergencyBrakeMass
        {
            get
            {
                if (this.EmergencyBrakeMassValueSpecified)
                {
                    return this.EmergencyBrakeMassValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EmergencyBrakeMassValue = value.GetValueOrDefault();
                this.EmergencyBrakeMassValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>alternative specification of maximum possible momentary deceleration</para>
        /// <para>generic type for acceleration values measured in meter per square second</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("maxDeceleration")]
        public decimal MaxDecelerationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxDeceleration-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxDeceleration property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MaxDecelerationValueSpecified { get; set; }
        
        /// <summary>
        /// <para>alternative specification of maximum possible momentary deceleration</para>
        /// <para>generic type for acceleration values measured in meter per square second</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> MaxDeceleration
        {
            get
            {
                if (this.MaxDecelerationValueSpecified)
                {
                    return this.MaxDecelerationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxDecelerationValue = value.GetValueOrDefault();
                this.MaxDecelerationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>alternative specification of effective mean deceleration of a whole brake operation</para>
        /// <para>generic type for acceleration values measured in meter per square second</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("meanDeceleration")]
        public decimal MeanDecelerationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MeanDeceleration-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MeanDeceleration property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool MeanDecelerationValueSpecified { get; set; }
        
        /// <summary>
        /// <para>alternative specification of effective mean deceleration of a whole brake operation</para>
        /// <para>generic type for acceleration values measured in meter per square second</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> MeanDeceleration
        {
            get
            {
                if (this.MeanDecelerationValueSpecified)
                {
                    return this.MeanDecelerationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MeanDecelerationValue = value.GetValueOrDefault();
                this.MeanDecelerationValueSpecified = value.HasValue;
            }
        }
    }
}
