//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
namespace Models.XsdConvert.genericRailML
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// <para>technical and payload data about a car</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tWagon", Namespace="https://www.railml.org/schemas/2018")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(genericRailML.EWagon))]
    internal partial class TWagon : IAWagon
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entit√§t eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public long Id { get; set; }
        
        /// <summary>
        /// <para>factor for increased running resistance by rotating masses of non-motored axles</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("rotationMassFactor")]
        public decimal RotationMassFactorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RotationMassFactor-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RotationMassFactor property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool RotationMassFactorValueSpecified { get; set; }
        
        /// <summary>
        /// <para>factor for increased running resistance by rotating masses of non-motored axles</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> RotationMassFactor
        {
            get
            {
                if (this.RotationMassFactorValueSpecified)
                {
                    return this.RotationMassFactorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RotationMassFactorValue = value.GetValueOrDefault();
                this.RotationMassFactorValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>additional mass for increased running resistance by rotating masses of non-motored axles</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("additionalRotationMass")]
        public decimal AdditionalRotationMassValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AdditionalRotationMass-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdditionalRotationMass property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AdditionalRotationMassValueSpecified { get; set; }
        
        /// <summary>
        /// <para>additional mass for increased running resistance by rotating masses of non-motored axles</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> AdditionalRotationMass
        {
            get
            {
                if (this.AdditionalRotationMassValueSpecified)
                {
                    return this.AdditionalRotationMassValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdditionalRotationMassValue = value.GetValueOrDefault();
                this.AdditionalRotationMassValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>name of car body kinematic envelope as reference</para>
        /// <para>an detailed description of an railway facility (e.g. station, timetable period or vehicle), allowing digits, letters and white space</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("kinematicEnvelope")]
        public string KinematicEnvelope { get; set; }
        
        /// <summary>
        /// <para>continuous power consumption in Watt of auxiliaries within one car</para>
        /// <para>generic type for power values measured in watt</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("auxiliaryPowerConsumption")]
        public decimal AuxiliaryPowerConsumptionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AuxiliaryPowerConsumption-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AuxiliaryPowerConsumption property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AuxiliaryPowerConsumptionValueSpecified { get; set; }
        
        /// <summary>
        /// <para>continuous power consumption in Watt of auxiliaries within one car</para>
        /// <para>generic type for power values measured in watt</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> AuxiliaryPowerConsumption
        {
            get
            {
                if (this.AuxiliaryPowerConsumptionValueSpecified)
                {
                    return this.AuxiliaryPowerConsumptionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AuxiliaryPowerConsumptionValue = value.GetValueOrDefault();
                this.AuxiliaryPowerConsumptionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>basic definition of head shape in order to derive air resistance of the vehicle</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("headShape")]
        public string HeadShape { get; set; }
        
        /// <summary>
        /// <para>cross-section area of vehicle front in order to derive air resistance of the vehicle</para>
        /// <para>generic type for area values measured in square meter</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("headSurface")]
        public decimal HeadSurfaceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HeadSurface-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the HeadSurface property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool HeadSurfaceValueSpecified { get; set; }
        
        /// <summary>
        /// <para>cross-section area of vehicle front in order to derive air resistance of the vehicle</para>
        /// <para>generic type for area values measured in square meter</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> HeadSurface
        {
            get
            {
                if (this.HeadSurfaceValueSpecified)
                {
                    return this.HeadSurfaceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.HeadSurfaceValue = value.GetValueOrDefault();
                this.HeadSurfaceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>describes the type of the bearing used for calculating vehicle resistance</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bearingType")]
        public string BearingType { get; set; }
    }
}
