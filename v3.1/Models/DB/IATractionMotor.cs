//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
namespace Models.DB
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Xml.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    internal partial interface IATractionMotor
    {
        
        /// <summary>
        /// <para>rated power consumption of one traction motor in Watt</para>
        /// <para>generic type for power values measured in watt</para>
        /// </summary>
        System.Nullable<decimal> NominalPower
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>rated voltage of traction motor in Volts</para>
        /// <para>generic type for voltage values measured in volt</para>
        /// </summary>
        System.Nullable<decimal> NominalVoltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>rated current of one traction motor in Amps</para>
        /// <para>generic type for electric current values measured in ampere</para>
        /// </summary>
        System.Nullable<decimal> NominalCurrent
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>rated frequency of traction motor windings in Hz</para>
        /// <para>generic type for frequency values measured in hertz</para>
        /// </summary>
        System.Nullable<decimal> NominalFrequency
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>nominal flux of one traction motor in Volt*sec</para>
        /// <para>generic type for electric flux values measured in volt*second</para>
        /// </summary>
        System.Nullable<decimal> NominalFlux
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>nominal phase angle phi of traction motor in the range -180..+180</para>
        /// <para>generic type for angle values measured in degree, allowing -180 ... +180</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        System.Nullable<decimal> NominalPhi
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>number of pole pairs of one traction motor</para>
        /// <para>generic type for counters (e.g. number of equipment), allowing zero</para>
        /// </summary>
        string NumberPolePairs
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>resistance of stator winding of one traction motor in Ohms</para>
        /// <para>generic type for electric resistance values measured in ohm</para>
        /// </summary>
        System.Nullable<decimal> StatorResistance
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>resistance of rotor winding of one traction motor in Ohms</para>
        /// <para>generic type for electric resistance values measured in ohm</para>
        /// </summary>
        System.Nullable<decimal> RotorResistance
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>resistance of iron core of one traction motor in Ohms (open-circuit core loss)</para>
        /// <para>generic type for electric resistance values measured in ohm</para>
        /// </summary>
        System.Nullable<decimal> FerrumResistance
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>additional resistance of one traction motor in Ohms due to non-sinusoid currents (stray loss)</para>
        /// <para>generic type for electric resistance values measured in ohm</para>
        /// </summary>
        System.Nullable<decimal> AdditionalResistance
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>main inductance of one traction motor in H</para>
        /// <para>generic type for inductance values measured in henry</para>
        /// </summary>
        System.Nullable<decimal> MainInductance
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>leakage inductance of stator winding of one traction motor in H</para>
        /// <para>generic type for inductance values measured in henry</para>
        /// </summary>
        System.Nullable<decimal> StatorLeakageInductance
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>leakage inductance of rotor winding of one traction motor in H</para>
        /// <para>generic type for inductance values measured in henry</para>
        /// </summary>
        System.Nullable<decimal> RotorLeakageInductance
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>nominal number of revolutions in revolutions per minute (rpm)</para>
        /// <para>generic type for rotational frequency values measured in revolutions per minute</para>
        /// </summary>
        string NominalRevolutions
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The traction motor mean efficiency in the range 0..1.</para>
        /// <para>generic type for values only between 0 and 1, as efficiency or cosine phi.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 6.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "1")]
        System.Nullable<decimal> MeanEfficiency
        {
            get;
            set;
        }
    }
}
