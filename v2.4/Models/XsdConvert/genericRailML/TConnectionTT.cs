//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Xml.Serialization;

namespace Models.XsdConvert.genericRailML
{
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("tConnectionTT", Namespace="https://www.railml.org/schemas/2018")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlIncludeAttribute(typeof(genericRailML.EConnectionTT))]
    internal partial class TConnectionTT : IAConnectionTT, genericRailML.IAnyAttribute
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entit√§t eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [KeyAttribute()]
        public long Id { get; set; }
        
        [XmlIgnoreAttribute()]
        private Collection<System.Xml.Linq.XElement> _any;
        
        /// <summary>
        /// <para>provide an extension point for non-railML elements in foreign namespace</para>
        /// </summary>
        [XmlAnyElementAttribute(Order=0)]
        [NotMappedAttribute()]
        public Collection<System.Xml.Linq.XElement> Any
        {
            get
            {
                return this._any;
            }
            private set
            {
                this._any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Any-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        public bool AnySpecified
        {
            get
            {
                return (this.Any.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="TConnectionTT" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TConnectionTT" /> class.</para>
        /// </summary>
        public TConnectionTT()
        {
            this._any = new Collection<System.Xml.Linq.XElement>();
        }
        
        /// <summary>
        /// <para>an XML-side constrained reference to one xs:ID value, acts across an XML file including its outsourced components (xi:include mechanism)</para>
        /// </summary>
        [XmlAttributeAttribute("trainRef")]
        public string TrainRef { get; set; }
        
        [XmlAttributeAttribute("minConnTime")]
        public string MinConnTime { get; set; }
        
        [XmlAttributeAttribute("maxConnTime")]
        public string MaxConnTime { get; set; }
        
        [XmlAttributeAttribute("connOperation")]
        public string ConnOperation { get; set; }
        
        /// <summary>
        /// <para>the reason for the connection (de: fahrplantechnische Bindung)</para>
        /// </summary>
        [XmlAttributeAttribute("connType")]
        public string ConnType { get; set; }
        
        /// <summary>
        /// <para>refers to an ocp element, in case the referenced train is located on a different ocp nearby</para>
        /// <para>an XML-side constrained reference to one xs:ID value, acts across an XML file including its outsourced components (xi:include mechanism)</para>
        /// </summary>
        [XmlAttributeAttribute("ocpRef")]
        public string OcpRef { get; set; }
        
        /// <summary>
        /// <para>refers to a trainPart element, which is more specific than the trainRef</para>
        /// <para>an XML-side constrained reference to one xs:ID value, acts across an XML file including its outsourced components (xi:include mechanism)</para>
        /// </summary>
        [XmlAttributeAttribute("trainPartRef")]
        public string TrainPartRef { get; set; }
        
        /// <summary>
        /// <para>references a reduction of the operating days of the connection compared to the operating days of the train part</para>
        /// <para>an XML-side constrained reference to one xs:ID value, acts across an XML file including its outsourced components (xi:include mechanism)</para>
        /// </summary>
        [XmlAttributeAttribute("operatingPeriodRef")]
        public string OperatingPeriodRef { get; set; }
        
        /// <summary>
        /// <para>indicates if the connection could not be guaranteed</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("notGuaranteed")]
        public bool NotGuaranteedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NotGuaranteed-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NotGuaranteed property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NotGuaranteedValueSpecified { get; set; }
        
        /// <summary>
        /// <para>indicates if the connection could not be guaranteed</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<bool> NotGuaranteed
        {
            get
            {
                if (this.NotGuaranteedValueSpecified)
                {
                    return this.NotGuaranteedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NotGuaranteedValue = value.GetValueOrDefault();
                this.NotGuaranteedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>indicates that no such connection should be generated or communicated, in order to lead passengers to the appropriate connection</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("nonConnection")]
        public bool NonConnectionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NonConnection-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NonConnection property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool NonConnectionValueSpecified { get; set; }
        
        /// <summary>
        /// <para>indicates that no such connection should be generated or communicated, in order to lead passengers to the appropriate connection</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<bool> NonConnection
        {
            get
            {
                if (this.NonConnectionValueSpecified)
                {
                    return this.NonConnectionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.NonConnectionValue = value.GetValueOrDefault();
                this.NonConnectionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>indicates if the connection is on the same platform</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("samePlatform")]
        public bool SamePlatformValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SamePlatform-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SamePlatform property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SamePlatformValueSpecified { get; set; }
        
        /// <summary>
        /// <para>indicates if the connection is on the same platform</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<bool> SamePlatform
        {
            get
            {
                if (this.SamePlatformValueSpecified)
                {
                    return this.SamePlatformValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SamePlatformValue = value.GetValueOrDefault();
                this.SamePlatformValueSpecified = value.HasValue;
            }
        }
    }
}
