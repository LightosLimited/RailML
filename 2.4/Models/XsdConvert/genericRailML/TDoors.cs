//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Xml.Serialization;

namespace Models.XsdConvert.genericRailML
{
    /// <summary>
    /// <para>data about door features for the car</para>
    /// </summary>
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("tDoors", Namespace="https://www.railml.org/schemas/2018")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlIncludeAttribute(typeof(genericRailML.EDoors))]
    internal partial class TDoors : IADoors
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entit√§t eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [KeyAttribute()]
        public long Id { get; set; }
        
        /// <summary>
        /// <para>number of doors per vehicle at each side</para>
        /// <para>generic type for counters (e.g. number of equipment), allowing zero</para>
        /// </summary>
        [XmlAttributeAttribute("number")]
        public string Number { get; set; }
        
        /// <summary>
        /// <para>height of entrance foot plate above rail top</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("entranceHeight")]
        public decimal EntranceHeightValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EntranceHeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EntranceHeight property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EntranceHeightValueSpecified { get; set; }
        
        /// <summary>
        /// <para>height of entrance foot plate above rail top</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> EntranceHeight
        {
            get
            {
                if (this.EntranceHeightValueSpecified)
                {
                    return this.EntranceHeightValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EntranceHeightValue = value.GetValueOrDefault();
                this.EntranceHeightValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>maximum distance between the doors of the vehicle</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("entranceLength")]
        public decimal EntranceLengthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EntranceLength-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EntranceLength property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EntranceLengthValueSpecified { get; set; }
        
        /// <summary>
        /// <para>maximum distance between the doors of the vehicle</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> EntranceLength
        {
            get
            {
                if (this.EntranceLengthValueSpecified)
                {
                    return this.EntranceLengthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EntranceLengthValue = value.GetValueOrDefault();
                this.EntranceLengthValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>total of all door width of the vehicle at one side</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("entranceWidth")]
        public decimal EntranceWidthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EntranceWidth-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EntranceWidth property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EntranceWidthValueSpecified { get; set; }
        
        /// <summary>
        /// <para>total of all door width of the vehicle at one side</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> EntranceWidth
        {
            get
            {
                if (this.EntranceWidthValueSpecified)
                {
                    return this.EntranceWidthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EntranceWidthValue = value.GetValueOrDefault();
                this.EntranceWidthValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>height of lowest foot step above rail top</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("footStepHeight")]
        public decimal FootStepHeightValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FootStepHeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FootStepHeight property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FootStepHeightValueSpecified { get; set; }
        
        /// <summary>
        /// <para>height of lowest foot step above rail top</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> FootStepHeight
        {
            get
            {
                if (this.FootStepHeightValueSpecified)
                {
                    return this.FootStepHeightValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FootStepHeightValue = value.GetValueOrDefault();
                this.FootStepHeightValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>speed limit for locking the doors during train ride</para>
        /// <para>generic type for speed/velocity values measured in kilometer per hour</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("lockingSpeed")]
        public decimal LockingSpeedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LockingSpeed-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LockingSpeed property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LockingSpeedValueSpecified { get; set; }
        
        /// <summary>
        /// <para>speed limit for locking the doors during train ride</para>
        /// <para>generic type for speed/velocity values measured in kilometer per hour</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> LockingSpeed
        {
            get
            {
                if (this.LockingSpeedValueSpecified)
                {
                    return this.LockingSpeedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LockingSpeedValue = value.GetValueOrDefault();
                this.LockingSpeedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>Time from stand-still of the vehicle to the flow of passengers can start through the doors. This is estimated to be at a door gap of 80cm.</para>
        /// </summary>
        [XmlAttributeAttribute("openingTime")]
        public string OpeningTime { get; set; }
        
        /// <summary>
        /// <para>Time after closing signal is given on the last door to the vehicles can be put in motion.</para>
        /// </summary>
        [XmlAttributeAttribute("closingTime")]
        public string ClosingTime { get; set; }
    }
}
