//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Xml.Serialization;

namespace Models.XsdConvert.genericRailML
{
    /// <summary>
    /// <para>data for passenger cars</para>
    /// </summary>
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("tPassenger", Namespace="https://www.railml.org/schemas/2018")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlIncludeAttribute(typeof(genericRailML.EPassenger))]
    internal partial class TPassenger : genericRailML.EPassengerFacility, IAPassenger
    {
        
        /// <summary>
        /// <para>number of decks per vehicle</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("deck")]
        public genericRailML.TVerbalCounter DeckValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Deck-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Deck property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DeckValueSpecified { get; set; }
        
        /// <summary>
        /// <para>number of decks per vehicle</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<genericRailML.TVerbalCounter> Deck
        {
            get
            {
                if (this.DeckValueSpecified)
                {
                    return this.DeckValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DeckValue = value.GetValueOrDefault();
                this.DeckValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>flag, whether the vehicle comprises driving cab</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("drivingCab")]
        public bool DrivingCabValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DrivingCab-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DrivingCab property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool DrivingCabValueSpecified { get; set; }
        
        /// <summary>
        /// <para>flag, whether the vehicle comprises driving cab</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<bool> DrivingCab
        {
            get
            {
                if (this.DrivingCabValueSpecified)
                {
                    return this.DrivingCabValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.DrivingCabValue = value.GetValueOrDefault();
                this.DrivingCabValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>flag, whether the vehicle comprises tilting capabilities</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("tilting")]
        public bool TiltingValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Tilting-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Tilting property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TiltingValueSpecified { get; set; }
        
        /// <summary>
        /// <para>flag, whether the vehicle comprises tilting capabilities</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<bool> Tilting
        {
            get
            {
                if (this.TiltingValueSpecified)
                {
                    return this.TiltingValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TiltingValue = value.GetValueOrDefault();
                this.TiltingValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>flag, whether the passenger compartment of the vehicle is air tight/pressure resistant</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("airTightness")]
        public bool AirTightnessValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AirTightness-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AirTightness property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AirTightnessValueSpecified { get; set; }
        
        /// <summary>
        /// <para>flag, whether the passenger compartment of the vehicle is air tight/pressure resistant</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<bool> AirTightness
        {
            get
            {
                if (this.AirTightnessValueSpecified)
                {
                    return this.AirTightnessValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AirTightnessValue = value.GetValueOrDefault();
                this.AirTightnessValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>flag, whether the vehicle comprises a de-activation function of the emergency brake for long tunnels</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("emergencyBrakeDeactivation")]
        public bool EmergencyBrakeDeactivationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EmergencyBrakeDeactivation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EmergencyBrakeDeactivation property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EmergencyBrakeDeactivationValueSpecified { get; set; }
        
        /// <summary>
        /// <para>flag, whether the vehicle comprises a de-activation function of the emergency brake for long tunnels</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<bool> EmergencyBrakeDeactivation
        {
            get
            {
                if (this.EmergencyBrakeDeactivationValueSpecified)
                {
                    return this.EmergencyBrakeDeactivationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EmergencyBrakeDeactivationValue = value.GetValueOrDefault();
                this.EmergencyBrakeDeactivationValueSpecified = value.HasValue;
            }
        }
    }
}
