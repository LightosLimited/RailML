//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
namespace Models.DB
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Xml.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tFormationTT", Namespace="https://www.railml.org/schemas/2018")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EFormationTT))]
    internal partial class TFormationTT : IAFormationTT, IAnyAttribute
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entit√§t eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public long Id { get; set; }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<System.Xml.Linq.XElement> _any;
        
        /// <summary>
        /// <para>provide an extension point for non-railML elements in foreign namespace</para>
        /// </summary>
        [System.Xml.Serialization.XmlAnyElementAttribute(Order=0)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public System.Collections.ObjectModel.Collection<System.Xml.Linq.XElement> Any
        {
            get
            {
                return this._any;
            }
            private set
            {
                this._any = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Any-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Any collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        public bool AnySpecified
        {
            get
            {
                return (this.Any.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="TFormationTT" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TFormationTT" /> class.</para>
        /// </summary>
        public TFormationTT()
        {
            this._any = new System.Collections.ObjectModel.Collection<System.Xml.Linq.XElement>();
        }
        
        /// <summary>
        /// <para>refers to the id attribute of the associated formation element</para>
        /// <para>an XML-side constrained reference to one xs:ID value, acts across an XML file including its outsourced components (xi:include mechanism)</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("formationRef")]
        public string FormationRef { get; set; }
        
        /// <summary>
        /// <para>real weight of the formation while in use</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("weight")]
        public decimal WeightValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Weight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Weight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool WeightValueSpecified { get; set; }
        
        /// <summary>
        /// <para>real weight of the formation while in use</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> Weight
        {
            get
            {
                if (this.WeightValueSpecified)
                {
                    return this.WeightValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WeightValue = value.GetValueOrDefault();
                this.WeightValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>weight without engine</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("load")]
        public decimal LoadValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Load-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Load property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LoadValueSpecified { get; set; }
        
        /// <summary>
        /// <para>weight without engine</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> Load
        {
            get
            {
                if (this.LoadValueSpecified)
                {
                    return this.LoadValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoadValue = value.GetValueOrDefault();
                this.LoadValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>the real length of the formation while in use</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("length")]
        public decimal LengthValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Length-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Length property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool LengthValueSpecified { get; set; }
        
        /// <summary>
        /// <para>the real length of the formation while in use</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> Length
        {
            get
            {
                if (this.LengthValueSpecified)
                {
                    return this.LengthValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LengthValue = value.GetValueOrDefault();
                this.LengthValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>the real maximum speed of the formation while in use</para>
        /// <para>generic type for speed/velocity values measured in kilometer per hour</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("speed")]
        public decimal SpeedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Speed-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Speed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool SpeedValueSpecified { get; set; }
        
        /// <summary>
        /// <para>the real maximum speed of the formation while in use</para>
        /// <para>generic type for speed/velocity values measured in kilometer per hour</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> Speed
        {
            get
            {
                if (this.SpeedValueSpecified)
                {
                    return this.SpeedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SpeedValue = value.GetValueOrDefault();
                this.SpeedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>assumed load (without engine) for timetable planning</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("timetableLoad")]
        public decimal TimetableLoadValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TimetableLoad-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TimetableLoad property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TimetableLoadValueSpecified { get; set; }
        
        /// <summary>
        /// <para>assumed load (without engine) for timetable planning</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> TimetableLoad
        {
            get
            {
                if (this.TimetableLoadValueSpecified)
                {
                    return this.TimetableLoadValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TimetableLoadValue = value.GetValueOrDefault();
                this.TimetableLoadValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>indicates, that the formation is not as referenced but in the reversed order</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("orientationReversed")]
        public bool OrientationReversedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OrientationReversed-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OrientationReversed property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool OrientationReversedValueSpecified { get; set; }
        
        /// <summary>
        /// <para>indicates, that the formation is not as referenced but in the reversed order</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> OrientationReversed
        {
            get
            {
                if (this.OrientationReversedValueSpecified)
                {
                    return this.OrientationReversedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OrientationReversedValue = value.GetValueOrDefault();
                this.OrientationReversedValueSpecified = value.HasValue;
            }
        }
    }
}
