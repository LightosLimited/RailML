//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Xml.Serialization;

namespace Models.XsdConvert.genericRailML
{
    /// <summary>
    /// <para>data of available mechanical couplers between wagons</para>
    /// </summary>
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("tMechanicalWagonCouplerType", Namespace="https://www.railml.org/schemas/2018")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlIncludeAttribute(typeof(genericRailML.EMechanicalCoupler))]
    internal partial class TMechanicalWagonCouplerType : IAMechanicalWagonCoupler
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entit√§t eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [KeyAttribute()]
        public long Id { get; set; }
        
        /// <summary>
        /// <para>design type of the mechanical wagon coupler</para>
        /// </summary>
        [XmlAttributeAttribute("designType")]
        public string DesignType { get; set; }
        
        /// <summary>
        /// <para>basic position of the mechanical wagon coupler (front/rear/both)</para>
        /// </summary>
        [XmlAttributeAttribute("positionOnCarEnd")]
        public TEndPositionType PositionOnCarEnd { get; set; }
        
        /// <summary>
        /// <para>coupling level above top of rail in mm</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("couplingHeight")]
        public decimal CouplingHeightValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die CouplingHeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the CouplingHeight property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool CouplingHeightValueSpecified { get; set; }
        
        /// <summary>
        /// <para>coupling level above top of rail in mm</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> CouplingHeight
        {
            get
            {
                if (this.CouplingHeightValueSpecified)
                {
                    return this.CouplingHeightValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.CouplingHeightValue = value.GetValueOrDefault();
                this.CouplingHeightValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>maximum force in Newton to be used for pulling vehicles with this type of coupling</para>
        /// <para>generic type for force values measured in newton</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("pullingForce")]
        public decimal PullingForceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PullingForce-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PullingForce property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PullingForceValueSpecified { get; set; }
        
        /// <summary>
        /// <para>maximum force in Newton to be used for pulling vehicles with this type of coupling</para>
        /// <para>generic type for force values measured in newton</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> PullingForce
        {
            get
            {
                if (this.PullingForceValueSpecified)
                {
                    return this.PullingForceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PullingForceValue = value.GetValueOrDefault();
                this.PullingForceValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>maximum force in Newton to be used for pushing vehicles with this type of coupling</para>
        /// <para>generic type for force values measured in newton</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("pushingForce")]
        public decimal PushingForceValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PushingForce-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PushingForce property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool PushingForceValueSpecified { get; set; }
        
        /// <summary>
        /// <para>maximum force in Newton to be used for pushing vehicles with this type of coupling</para>
        /// <para>generic type for force values measured in newton</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> PushingForce
        {
            get
            {
                if (this.PushingForceValueSpecified)
                {
                    return this.PushingForceValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.PushingForceValue = value.GetValueOrDefault();
                this.PushingForceValueSpecified = value.HasValue;
            }
        }
    }
}
