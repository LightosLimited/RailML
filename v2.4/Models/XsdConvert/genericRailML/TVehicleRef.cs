//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Xml.Serialization;

namespace Models.XsdConvert.genericRailML
{
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("tVehicleRef", Namespace="https://www.railml.org/schemas/2018")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    internal partial class TVehicleRef : IAVehicleRef
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entit√§t eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [KeyAttribute()]
        public long Id { get; set; }
        
        /// <summary>
        /// <para>position of that vehicle (group) in the formation</para>
        /// <para>generic type for counters (e.g. order number of a vehicle in an formation), starting with '1'</para>
        /// </summary>
        [XmlAttributeAttribute("orderNumber")]
        public string OrderNumber { get; set; }
        
        /// <summary>
        /// <para>vehicle type as reference</para>
        /// <para>an XML-side constrained reference to one xs:ID value, acts across an XML file including its outsourced components (xi:include mechanism)</para>
        /// </summary>
        [XmlAttributeAttribute("vehicleRef")]
        public string VehicleRef { get; set; }
        
        /// <summary>
        /// <para>number of consecutive vehicles of that type in the formation</para>
        /// <para>generic type for counters (e.g. number of equipment), allowing zero</para>
        /// </summary>
        [XmlAttributeAttribute("vehicleCount")]
        public string VehicleCount { get; set; }
        
        /// <summary>
        /// <para>flag, whether there is a gangway at the front end of the vehicle usable</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("frontGangway")]
        public bool FrontGangwayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FrontGangway-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FrontGangway property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FrontGangwayValueSpecified { get; set; }
        
        /// <summary>
        /// <para>flag, whether there is a gangway at the front end of the vehicle usable</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<bool> FrontGangway
        {
            get
            {
                if (this.FrontGangwayValueSpecified)
                {
                    return this.FrontGangwayValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FrontGangwayValue = value.GetValueOrDefault();
                this.FrontGangwayValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>flag, whether there is a gangway at the rear end of the vehicle usable</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("rearGangway")]
        public bool RearGangwayValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RearGangway-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RearGangway property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RearGangwayValueSpecified { get; set; }
        
        /// <summary>
        /// <para>flag, whether there is a gangway at the rear end of the vehicle usable</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<bool> RearGangway
        {
            get
            {
                if (this.RearGangwayValueSpecified)
                {
                    return this.RearGangwayValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RearGangwayValue = value.GetValueOrDefault();
                this.RearGangwayValueSpecified = value.HasValue;
            }
        }
    }
}
