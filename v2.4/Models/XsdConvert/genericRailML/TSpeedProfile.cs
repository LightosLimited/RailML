//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Xml.Serialization;

namespace Models.XsdConvert.genericRailML
{
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("tSpeedProfile", Namespace="https://www.railml.org/schemas/2018")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    internal partial class TSpeedProfile : genericRailML.TElementWithIDAndName, IAPeriodTimeSpan
    {
        
        /// <summary>
        /// <para>the tilting element contains parameters describing the required train tilting characteristics</para>
        /// </summary>
        [XmlElementAttribute("tilting", Order=0)]
        public genericRailML.TTilting Tilting { get; set; }
        
        /// <summary>
        /// <para>the braking element contains parameters describing the required train braking configuration</para>
        /// </summary>
        [XmlElementAttribute("braking", Order=1)]
        public TBraking Braking { get; set; }
        
        /// <summary>
        /// <para>the path element indicates a train run between two neighbouring OCPs</para>
        /// </summary>
        [XmlElementAttribute("path", Order=2)]
        public TPath Path { get; set; }
        
        /// <summary>
        /// <para>allows for overlaying speed profiles</para>
        /// </summary>
        [XmlAttributeAttribute("influence")]
        public string Influence { get; set; }
        
        /// <summary>
        /// <para>maximum axle load of the train in tons</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("maxAxleLoad")]
        public decimal MaxAxleLoadValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxAxleLoad-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxAxleLoad property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxAxleLoadValueSpecified { get; set; }
        
        /// <summary>
        /// <para>maximum axle load of the train in tons</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> MaxAxleLoad
        {
            get
            {
                if (this.MaxAxleLoadValueSpecified)
                {
                    return this.MaxAxleLoadValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxAxleLoadValue = value.GetValueOrDefault();
                this.MaxAxleLoadValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>maximum meter load of the train in tons per meter</para>
        /// <para>generic type for load per meter values measured in ton per meter</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("maxMeterLoad")]
        public decimal MaxMeterLoadValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxMeterLoad-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxMeterLoad property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxMeterLoadValueSpecified { get; set; }
        
        /// <summary>
        /// <para>maximum meter load of the train in tons per meter</para>
        /// <para>generic type for load per meter values measured in ton per meter</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> MaxMeterLoad
        {
            get
            {
                if (this.MaxMeterLoadValueSpecified)
                {
                    return this.MaxMeterLoadValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxMeterLoadValue = value.GetValueOrDefault();
                this.MaxMeterLoadValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>reference to an operatingPeriod element from the timetable sub-schema</para>
        /// <para>an XML-side constrained reference to one xs:ID value, acts across an XML file including its outsourced components (xi:include mechanism)</para>
        /// </summary>
        [XmlAttributeAttribute("operatingPeriodRef")]
        public string OperatingPeriodRef { get; set; }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("startTime", DataType="time")]
        public System.DateTime StartTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StartTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StartTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool StartTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> StartTime
        {
            get
            {
                if (this.StartTimeValueSpecified)
                {
                    return this.StartTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.StartTimeValue = value.GetValueOrDefault();
                this.StartTimeValueSpecified = value.HasValue;
            }
        }
        
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("endTime", DataType="time")]
        public System.DateTime EndTimeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EndTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EndTime property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool EndTimeValueSpecified { get; set; }
        
        [XmlIgnoreAttribute()]
        public System.Nullable<System.DateTime> EndTime
        {
            get
            {
                if (this.EndTimeValueSpecified)
                {
                    return this.EndTimeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.EndTimeValue = value.GetValueOrDefault();
                this.EndTimeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>The number of midnight overruns over which the speed profile is valid.</para>
        /// </summary>
        [XmlAttributeAttribute("endDayOffset")]
        public string EndDayOffset { get; set; }
        
        /// <summary>
        /// <para>defining the train protection system</para>
        /// <para>use value from the separate code definition file 'TrainProtectionSystems.xml'/trainProtectionSystemsAtTrack</para>
        /// </summary>
        [XmlAttributeAttribute("trainProtectionSystem")]
        public string TrainProtectionSystem { get; set; }
        
        /// <summary>
        /// <para>defining additional verbal constraints like certain train types</para>
        /// </summary>
        [XmlAttributeAttribute("verbalConstraint")]
        public string VerbalConstraint { get; set; }
    }
}
