//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Xml.Serialization;

namespace Models.XsdConvert.genericRailML
{
    /// <summary>
    /// <para>data for freight cars</para>
    /// </summary>
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("tGoods", Namespace="https://www.railml.org/schemas/2018")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlIncludeAttribute(typeof(genericRailML.EGoods))]
    internal partial class TGoods : IAGoods
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entit√§t eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [KeyAttribute()]
        public long Id { get; set; }
        
        /// <summary>
        /// <para>maximum payload per wagon in metric tons</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("load")]
        public decimal LoadValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Load-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Load property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoadValueSpecified { get; set; }
        
        /// <summary>
        /// <para>maximum payload per wagon in metric tons</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> Load
        {
            get
            {
                if (this.LoadValueSpecified)
                {
                    return this.LoadValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoadValue = value.GetValueOrDefault();
                this.LoadValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>maximum area to be used for payload per wagon in square metres</para>
        /// <para>generic type for area values measured in square meter</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("loadArea")]
        public decimal LoadAreaValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LoadArea-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LoadArea property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool LoadAreaValueSpecified { get; set; }
        
        /// <summary>
        /// <para>maximum area to be used for payload per wagon in square metres</para>
        /// <para>generic type for area values measured in square meter</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> LoadArea
        {
            get
            {
                if (this.LoadAreaValueSpecified)
                {
                    return this.LoadAreaValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.LoadAreaValue = value.GetValueOrDefault();
                this.LoadAreaValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>available volume for payload per vehicle</para>
        /// <para>generic type for volume values measured in cubic meter</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("volume")]
        public decimal VolumeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Volume-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Volume property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VolumeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>available volume for payload per vehicle</para>
        /// <para>generic type for volume values measured in cubic meter</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> Volume
        {
            get
            {
                if (this.VolumeValueSpecified)
                {
                    return this.VolumeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VolumeValue = value.GetValueOrDefault();
                this.VolumeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>simple classification of goods vehicle</para>
        /// </summary>
        [XmlAttributeAttribute("freightCarType")]
        public string FreightCarType { get; set; }
        
        /// <summary>
        /// <para>classification string of goods vehicle according UIC</para>
        /// <para>system-wide known name of an railway facility (e.g. station, timetable period or vehicle), allowing digits, letters and white space</para>
        /// </summary>
        [XmlAttributeAttribute("freightCarUICType")]
        public string FreightCarUICType { get; set; }
    }
}
