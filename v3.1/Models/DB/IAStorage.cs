//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
namespace Models.DB
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Xml.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    internal partial interface IAStorage
    {
        
        /// <summary>
        /// <para>The maximum current in A while charging the energy storage.</para>
        /// <para>generic type for electric current values measured in ampere</para>
        /// </summary>
        decimal MaximumCurrentCharging
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The maximum current in A while discharging the energy storage.</para>
        /// <para>generic type for electric current values measured in ampere</para>
        /// </summary>
        decimal MaximumCurrentDischarging
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The maximum power in W while charging the energy storage.</para>
        /// <para>generic type for power values measured in watt</para>
        /// </summary>
        decimal MaximumPowerCharging
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The maximum power in W while discharging the energy storage.</para>
        /// <para>generic type for power values measured in watt</para>
        /// </summary>
        decimal MaximumPowerDischarging
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The maximum energy in kWh charging to the energy storage.</para>
        /// <para>generic type for energy values measured in kilowatt*hour</para>
        /// </summary>
        decimal MaximumChargingEnergy
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The efficiency while charging the energy storage.</para>
        /// <para>generic type for values only between 0 and 1, as efficiency or cosine phi.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 6.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "1")]
        System.Nullable<decimal> ChargingEfficiency
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The efficiency while discharging the energy storage.</para>
        /// <para>generic type for values only between 0 and 1, as efficiency or cosine phi.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 6.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "1")]
        System.Nullable<decimal> DischargingEfficiency
        {
            get;
            set;
        }
        
        /// <summary>
        /// <para>The mean efficiency of the energy storage.</para>
        /// <para>generic type for values only between 0 and 1, as efficiency or cosine phi.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 6.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "1")]
        System.Nullable<decimal> MeanStorageEfficiency
        {
            get;
            set;
        }
    }
}
