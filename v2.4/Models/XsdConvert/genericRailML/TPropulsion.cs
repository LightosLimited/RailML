//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Xml.Serialization;

namespace Models.XsdConvert.genericRailML
{
    /// <summary>
    /// <para>technical data about the propulsion system of a vehicle</para>
    /// </summary>
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("tPropulsion", Namespace="https://www.railml.org/schemas/2018")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlIncludeAttribute(typeof(genericRailML.EPropulsion))]
    internal partial class TPropulsion : genericRailML.TElementWithIDAndName, IAElectrificationSystem, IAPropulsion
    {
        
        /// <summary>
        /// <para>as values (not enumeration)!!</para>
        /// <para>generic type for voltage values measured in volt</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("voltage")]
        public decimal VoltageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Voltage-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Voltage property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool VoltageValueSpecified { get; set; }
        
        /// <summary>
        /// <para>as values (not enumeration)!!</para>
        /// <para>generic type for voltage values measured in volt</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> Voltage
        {
            get
            {
                if (this.VoltageValueSpecified)
                {
                    return this.VoltageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.VoltageValue = value.GetValueOrDefault();
                this.VoltageValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>for DC the frequency shall be set to Zero</para>
        /// <para>generic type for frequency values measured in hertz</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("frequency")]
        public decimal FrequencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Frequency-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Frequency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool FrequencyValueSpecified { get; set; }
        
        /// <summary>
        /// <para>for DC the frequency shall be set to Zero</para>
        /// <para>generic type for frequency values measured in hertz</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> Frequency
        {
            get
            {
                if (this.FrequencyValueSpecified)
                {
                    return this.FrequencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.FrequencyValue = value.GetValueOrDefault();
                this.FrequencyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>installed power of propulsion system per vehicle in Watt</para>
        /// <para>generic type for power values measured in watt</para>
        /// </summary>
        [XmlAttributeAttribute("power")]
        public decimal Power { get; set; }
        
        /// <summary>
        /// <para>type of power for propulsion system in the vehicle</para>
        /// </summary>
        [XmlAttributeAttribute("powerType")]
        public string PowerType { get; set; }
        
        /// <summary>
        /// <para>type of transmission system in vehicle (mainly for diesel cars)</para>
        /// </summary>
        [XmlAttributeAttribute("transmission")]
        public string Transmission { get; set; }
        
        /// <summary>
        /// <para>type of control for propulsion system in the vehicle</para>
        /// </summary>
        [XmlAttributeAttribute("controlType")]
        public string ControlType { get; set; }
        
        /// <summary>
        /// <para>maximum tractive effort per vehicle in Newton (to be used in conjunction with 'tractiveEffort' element)</para>
        /// <para>generic type for force values measured in newton</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("maxTractEffort")]
        public decimal MaxTractEffortValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxTractEffort-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxTractEffort property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxTractEffortValueSpecified { get; set; }
        
        /// <summary>
        /// <para>maximum tractive effort per vehicle in Newton (to be used in conjunction with 'tractiveEffort' element)</para>
        /// <para>generic type for force values measured in newton</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> MaxTractEffort
        {
            get
            {
                if (this.MaxTractEffortValueSpecified)
                {
                    return this.MaxTractEffortValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxTractEffortValue = value.GetValueOrDefault();
                this.MaxTractEffortValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>factor for increased running resistance by rotating masses of propulsion system</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("rotationMassFactor")]
        public decimal RotationMassFactorValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RotationMassFactor-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RotationMassFactor property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RotationMassFactorValueSpecified { get; set; }
        
        /// <summary>
        /// <para>factor for increased running resistance by rotating masses of propulsion system</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> RotationMassFactor
        {
            get
            {
                if (this.RotationMassFactorValueSpecified)
                {
                    return this.RotationMassFactorValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RotationMassFactorValue = value.GetValueOrDefault();
                this.RotationMassFactorValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>figure for increased running resistance by rotating masses of propulsion system</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("additionalRotationMass")]
        public decimal AdditionalRotationMassValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AdditionalRotationMass-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AdditionalRotationMass property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool AdditionalRotationMassValueSpecified { get; set; }
        
        /// <summary>
        /// <para>figure for increased running resistance by rotating masses of propulsion system</para>
        /// <para>generic type for weight/load values measured in ton</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> AdditionalRotationMass
        {
            get
            {
                if (this.AdditionalRotationMassValueSpecified)
                {
                    return this.AdditionalRotationMassValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AdditionalRotationMassValue = value.GetValueOrDefault();
                this.AdditionalRotationMassValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>DEPRECATED: flag, whether the vehicle comprises equipment for use on rack railways</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("rackTraction")]
        public bool RackTractionValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RackTraction-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RackTraction property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RackTractionValueSpecified { get; set; }
        
        /// <summary>
        /// <para>DEPRECATED: flag, whether the vehicle comprises equipment for use on rack railways</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<bool> RackTraction
        {
            get
            {
                if (this.RackTractionValueSpecified)
                {
                    return this.RackTractionValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RackTractionValue = value.GetValueOrDefault();
                this.RackTractionValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>flag, whether the vehicle can be remotely controlled</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("remoteControl")]
        public bool RemoteControlValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RemoteControl-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RemoteControl property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool RemoteControlValueSpecified { get; set; }
        
        /// <summary>
        /// <para>flag, whether the vehicle can be remotely controlled</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<bool> RemoteControl
        {
            get
            {
                if (this.RemoteControlValueSpecified)
                {
                    return this.RemoteControlValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.RemoteControlValue = value.GetValueOrDefault();
                this.RemoteControlValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>number of notches of propulsion system switch gear</para>
        /// <para>generic type for counters (e.g. number of equipment), allowing zero</para>
        /// </summary>
        [XmlAttributeAttribute("numberNotches")]
        public string NumberNotches { get; set; }
        
        /// <summary>
        /// <para>nominal diameter of driven wheels in m</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("wheelDiameter")]
        public decimal WheelDiameterValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die WheelDiameter-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the WheelDiameter property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool WheelDiameterValueSpecified { get; set; }
        
        /// <summary>
        /// <para>nominal diameter of driven wheels in m</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> WheelDiameter
        {
            get
            {
                if (this.WheelDiameterValueSpecified)
                {
                    return this.WheelDiameterValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.WheelDiameterValue = value.GetValueOrDefault();
                this.WheelDiameterValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>maximum braking effort of propulsion system per vehicle in N (to be used in conjunction with 'brakeEffort' element)</para>
        /// <para>generic type for force values measured in newton</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("maxBrakeEffort")]
        public decimal MaxBrakeEffortValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxBrakeEffort-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxBrakeEffort property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxBrakeEffortValueSpecified { get; set; }
        
        /// <summary>
        /// <para>maximum braking effort of propulsion system per vehicle in N (to be used in conjunction with 'brakeEffort' element)</para>
        /// <para>generic type for force values measured in newton</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> MaxBrakeEffort
        {
            get
            {
                if (this.MaxBrakeEffortValueSpecified)
                {
                    return this.MaxBrakeEffortValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxBrakeEffortValue = value.GetValueOrDefault();
                this.MaxBrakeEffortValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>maximum braking power in W for regenerative braking</para>
        /// <para>generic type for power values measured in watt</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("maxBrakePower")]
        public decimal MaxBrakePowerValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxBrakePower-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxBrakePower property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxBrakePowerValueSpecified { get; set; }
        
        /// <summary>
        /// <para>maximum braking power in W for regenerative braking</para>
        /// <para>generic type for power values measured in watt</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> MaxBrakePower
        {
            get
            {
                if (this.MaxBrakePowerValueSpecified)
                {
                    return this.MaxBrakePowerValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxBrakePowerValue = value.GetValueOrDefault();
                this.MaxBrakePowerValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>the average efficiency of the entire propulsion system in traction mode</para>
        /// <para>generic type for values only between 0 and 1, as efficiency or cosine phi.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 6.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "0", "1")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("totalTractEfficiency")]
        public decimal TotalTractEfficiencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TotalTractEfficiency-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalTractEfficiency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalTractEfficiencyValueSpecified { get; set; }
        
        /// <summary>
        /// <para>the average efficiency of the entire propulsion system in traction mode</para>
        /// <para>generic type for values only between 0 and 1, as efficiency or cosine phi.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 6.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> TotalTractEfficiency
        {
            get
            {
                if (this.TotalTractEfficiencyValueSpecified)
                {
                    return this.TotalTractEfficiencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalTractEfficiencyValue = value.GetValueOrDefault();
                this.TotalTractEfficiencyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>the average efficiency of the entire propulsion system in braking mode</para>
        /// <para>generic type for values only between 0 and 1, as efficiency or cosine phi.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 6.</para>
        /// </summary>
        [RangeAttribute(typeof(decimal), "0", "1")]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("totalBrakeEfficiency")]
        public decimal TotalBrakeEfficiencyValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TotalBrakeEfficiency-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TotalBrakeEfficiency property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TotalBrakeEfficiencyValueSpecified { get; set; }
        
        /// <summary>
        /// <para>the average efficiency of the entire propulsion system in braking mode</para>
        /// <para>generic type for values only between 0 and 1, as efficiency or cosine phi.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 1.</para>
        /// <para xml:lang="en">Total number of digits in fraction: 6.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> TotalBrakeEfficiency
        {
            get
            {
                if (this.TotalBrakeEfficiencyValueSpecified)
                {
                    return this.TotalBrakeEfficiencyValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TotalBrakeEfficiencyValue = value.GetValueOrDefault();
                this.TotalBrakeEfficiencyValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>under voltage threshold to switch off traction power in case net voltage out of limit</para>
        /// <para>generic type for voltage values measured in volt</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("tractionOffUndervoltageThreshold")]
        public decimal TractionOffUndervoltageThresholdValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TractionOffUndervoltageThreshold-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TractionOffUndervoltageThreshold property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TractionOffUndervoltageThresholdValueSpecified { get; set; }
        
        /// <summary>
        /// <para>under voltage threshold to switch off traction power in case net voltage out of limit</para>
        /// <para>generic type for voltage values measured in volt</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> TractionOffUndervoltageThreshold
        {
            get
            {
                if (this.TractionOffUndervoltageThresholdValueSpecified)
                {
                    return this.TractionOffUndervoltageThresholdValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TractionOffUndervoltageThresholdValue = value.GetValueOrDefault();
                this.TractionOffUndervoltageThresholdValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>current limitation in Amps at zero speed</para>
        /// <para>generic type for electric current values measured in ampere</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("zeroSpeedCurrentLimitation")]
        public decimal ZeroSpeedCurrentLimitationValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ZeroSpeedCurrentLimitation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ZeroSpeedCurrentLimitation property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ZeroSpeedCurrentLimitationValueSpecified { get; set; }
        
        /// <summary>
        /// <para>current limitation in Amps at zero speed</para>
        /// <para>generic type for electric current values measured in ampere</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> ZeroSpeedCurrentLimitation
        {
            get
            {
                if (this.ZeroSpeedCurrentLimitationValueSpecified)
                {
                    return this.ZeroSpeedCurrentLimitationValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ZeroSpeedCurrentLimitationValue = value.GetValueOrDefault();
                this.ZeroSpeedCurrentLimitationValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>maximum voltage in Volts for regenerative braking</para>
        /// <para>generic type for voltage values measured in volt</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("maxRegenerativeVoltage")]
        public decimal MaxRegenerativeVoltageValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxRegenerativeVoltage-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxRegenerativeVoltage property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxRegenerativeVoltageValueSpecified { get; set; }
        
        /// <summary>
        /// <para>maximum voltage in Volts for regenerative braking</para>
        /// <para>generic type for voltage values measured in volt</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> MaxRegenerativeVoltage
        {
            get
            {
                if (this.MaxRegenerativeVoltageValueSpecified)
                {
                    return this.MaxRegenerativeVoltageValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxRegenerativeVoltageValue = value.GetValueOrDefault();
                this.MaxRegenerativeVoltageValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>additional information, whether this propulsion dataset is for the normal, slow or fast speed range of the engine</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("speedRange")]
        public TSpeedRangeType SpeedRangeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SpeedRange-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SpeedRange property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool SpeedRangeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>additional information, whether this propulsion dataset is for the normal, slow or fast speed range of the engine</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<TSpeedRangeType> SpeedRange
        {
            get
            {
                if (this.SpeedRangeValueSpecified)
                {
                    return this.SpeedRangeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.SpeedRangeValue = value.GetValueOrDefault();
                this.SpeedRangeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>permissible speed with front ahead (normal direction)</para>
        /// <para>generic type for speed/velocity values measured in kilometer per hour</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("forwardSpeed")]
        public decimal ForwardSpeedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ForwardSpeed-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ForwardSpeed property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ForwardSpeedValueSpecified { get; set; }
        
        /// <summary>
        /// <para>permissible speed with front ahead (normal direction)</para>
        /// <para>generic type for speed/velocity values measured in kilometer per hour</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> ForwardSpeed
        {
            get
            {
                if (this.ForwardSpeedValueSpecified)
                {
                    return this.ForwardSpeedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ForwardSpeedValue = value.GetValueOrDefault();
                this.ForwardSpeedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>permissible speed with tail ahead (reverse direction)</para>
        /// <para>generic type for speed/velocity values measured in kilometer per hour</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("reverseSpeed")]
        public decimal ReverseSpeedValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ReverseSpeed-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ReverseSpeed property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ReverseSpeedValueSpecified { get; set; }
        
        /// <summary>
        /// <para>permissible speed with tail ahead (reverse direction)</para>
        /// <para>generic type for speed/velocity values measured in kilometer per hour</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> ReverseSpeed
        {
            get
            {
                if (this.ReverseSpeedValueSpecified)
                {
                    return this.ReverseSpeedValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ReverseSpeedValue = value.GetValueOrDefault();
                this.ReverseSpeedValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>propulsion system can be activated only in standstill</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("activationStandstill")]
        public bool ActivationStandstillValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ActivationStandstill-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ActivationStandstill property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ActivationStandstillValueSpecified { get; set; }
        
        /// <summary>
        /// <para>propulsion system can be activated only in standstill</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<bool> ActivationStandstill
        {
            get
            {
                if (this.ActivationStandstillValueSpecified)
                {
                    return this.ActivationStandstillValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ActivationStandstillValue = value.GetValueOrDefault();
                this.ActivationStandstillValueSpecified = value.HasValue;
            }
        }
    }
}
