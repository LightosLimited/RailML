//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
namespace Models.XsdConvert.genericRailML
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Xml.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tOcpTT", Namespace="https://www.railml.org/schemas/2018")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(genericRailML.EOcpTT))]
    internal partial class TOcpTT : IAOcpTT, genericRailML.IAnyAttribute
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entit√§t eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.KeyAttribute()]
        public long Id { get; set; }
        
        /// <summary>
        /// <para>defines explicitly the order of the ocpTTs which are supposed to be in chronological order along the train path</para>
        /// <para>generic type for counters (e.g. order number of a vehicle in an formation), starting with '1'</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("sequence")]
        public string Sequence { get; set; }
        
        /// <summary>
        /// <para>refers to the id attribute of the associated ocp element</para>
        /// <para>an XML-side constrained reference to one xs:ID value, acts across an XML file including its outsourced components (xi:include mechanism)</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("ocpRef")]
        public string OcpRef { get; set; }
        
        /// <summary>
        /// <para>refers to the id attribute of the associated track element</para>
        /// <para>an XML-side constrained reference to one xs:ID value, acts across an XML file including its outsourced components (xi:include mechanism)</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("trackRef")]
        public string TrackRef { get; set; }
        
        /// <summary>
        /// <para>is a description of the station track, often used for the platform number</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("trackInfo")]
        public string TrackInfo { get; set; }
        
        /// <summary>
        /// <para>describes if the train is going to stop/pass</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("ocpType")]
        public TOcpTTType OcpTypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OcpType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the OcpType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool OcpTypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>describes if the train is going to stop/pass</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<TOcpTTType> OcpType
        {
            get
            {
                if (this.OcpTypeValueSpecified)
                {
                    return this.OcpTypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OcpTypeValue = value.GetValueOrDefault();
                this.OcpTypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>a free attribute for further descriptions</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("remarks")]
        public string Remarks { get; set; }
        
        /// <summary>
        /// <para>is true if the train changes its direction of travel at this station. After this station the rollingstock which is referenced in formationTT changes its order</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("trainReverse")]
        public bool TrainReverseValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TrainReverse-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TrainReverse property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool TrainReverseValueSpecified { get; set; }
        
        /// <summary>
        /// <para>is true if the train changes its direction of travel at this station. After this station the rollingstock which is referenced in formationTT changes its order</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<bool> TrainReverse
        {
            get
            {
                if (this.TrainReverseValueSpecified)
                {
                    return this.TrainReverseValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TrainReverseValue = value.GetValueOrDefault();
                this.TrainReverseValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>describes the alignment of the arriving train in relation to the point on a track referenced by ocpRef</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("alignment")]
        public genericRailML.TTrainAlignment AlignmentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Alignment-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Alignment property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool AlignmentValueSpecified { get; set; }
        
        /// <summary>
        /// <para>describes the alignment of the arriving train in relation to the point on a track referenced by ocpRef</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<genericRailML.TTrainAlignment> Alignment
        {
            get
            {
                if (this.AlignmentValueSpecified)
                {
                    return this.AlignmentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.AlignmentValue = value.GetValueOrDefault();
                this.AlignmentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>describes the offset of the stopping point in relation to the point on a track referenced by ocpRef</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.Xml.Serialization.XmlAttributeAttribute("offset")]
        public decimal OffsetValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Offset-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Offset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute()]
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public bool OffsetValueSpecified { get; set; }
        
        /// <summary>
        /// <para>describes the offset of the stopping point in relation to the point on a track referenced by ocpRef</para>
        /// <para>generic type for length values measured in meter</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public System.Nullable<decimal> Offset
        {
            get
            {
                if (this.OffsetValueSpecified)
                {
                    return this.OffsetValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.OffsetValue = value.GetValueOrDefault();
                this.OffsetValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>is the driving time used inside a station</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("shuntingTime")]
        public string ShuntingTime { get; set; }
    }
}
