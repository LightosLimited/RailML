//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This C# code was generated by XmlSchemaClassGenerator version 1.0.0.0.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics;
using System.Xml.Serialization;

namespace Models.XsdConvert.genericRailML
{
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "1.0.0.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("tMaxTrainCurrent", Namespace="https://www.railml.org/schemas/2018")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    internal partial class TMaxTrainCurrent : genericRailML.IAnyAttribute
    {
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der diese Entit√§t eindeutig identifiziert, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value uniquely identifying this entity.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [KeyAttribute()]
        public long Id { get; set; }
        
        /// <summary>
        /// <para>maximum allowed current for the train in Ampere</para>
        /// <para>generic type for electric current values measured in ampere</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("maxCurrent")]
        public decimal MaxCurrentValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MaxCurrent-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MaxCurrent property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool MaxCurrentValueSpecified { get; set; }
        
        /// <summary>
        /// <para>maximum allowed current for the train in Ampere</para>
        /// <para>generic type for electric current values measured in ampere</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<decimal> MaxCurrent
        {
            get
            {
                if (this.MaxCurrentValueSpecified)
                {
                    return this.MaxCurrentValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.MaxCurrentValue = value.GetValueOrDefault();
                this.MaxCurrentValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>type of operation for maximum train current: standstill or driving</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("type")]
        public TMaxTrainCurrentType TypeValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Type-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool TypeValueSpecified { get; set; }
        
        /// <summary>
        /// <para>type of operation for maximum train current: standstill or driving</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<TMaxTrainCurrentType> Type
        {
            get
            {
                if (this.TypeValueSpecified)
                {
                    return this.TypeValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.TypeValue = value.GetValueOrDefault();
                this.TypeValueSpecified = value.HasValue;
            }
        }
        
        /// <summary>
        /// <para>application of maximum train current: train or pantograph</para>
        /// </summary>
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        [NotMappedAttribute()]
        [XmlAttributeAttribute("validFor")]
        public TMaxTrainCurrentValidFor ValidForValue { get; set; }
        
        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ValidFor-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ValidFor property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        [NotMappedAttribute()]
        [EditorBrowsableAttribute(EditorBrowsableState.Never)]
        public bool ValidForValueSpecified { get; set; }
        
        /// <summary>
        /// <para>application of maximum train current: train or pantograph</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public System.Nullable<TMaxTrainCurrentValidFor> ValidFor
        {
            get
            {
                if (this.ValidForValueSpecified)
                {
                    return this.ValidForValue;
                }
                else
                {
                    return null;
                }
            }
            set
            {
                this.ValidForValue = value.GetValueOrDefault();
                this.ValidForValueSpecified = value.HasValue;
            }
        }
    }
}
